package com.angu.bs.command;

import com.angu.bs.util.CustomFileBasedConfig;
import com.angu.bs.util.Utils;
import lombok.RequiredArgsConstructor;
import org.eclipse.jgit.lib.Config;
import org.eclipse.jgit.util.FS;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.ExitCodeGenerator;
import org.springframework.stereotype.Component;

import java.nio.file.Path;
import java.util.concurrent.Callable;

import static com.angu.bs.util.Utils.adddTrailingSlash;
import static picocli.CommandLine.Command;
import static picocli.CommandLine.Option;

@Command(name = "git-config-setup", showAtFileInUsageHelp = true, mixinStandardHelpOptions = true)
@Component
@RequiredArgsConstructor
public class ReadGitConfigCommand implements Callable<Integer>, ExitCodeGenerator {
    private final Logger log = LoggerFactory.getLogger(this.getClass());

    @Option(names = {"--user-gitconfig-path"}, required = true, description = "Path to user git configuration")
    Path userGitConfigPath;

    @Option(names = {"--user-login"}, required = true, description = "Login")
    String userLogin;

    @Option(names = {"--user-name"}, required = true, description = "User name")
    String userName;

    @Option(names = {"--user-email"}, required = true, description = "User email")
    String userEmail;

    @Option(names = {"--project-base-path"}, required = true, description = "Base path of the project. Git config will rely on this to load all the configuration")
    String projectBasePath;

    @Option(names = {"--project-gitconfig-path"}, required = true, description = "Path to the gitconfig that will be generated by this tool. " + "The user gitconfig will include a reference to this")
    Path projectGitConfigPath;

    @Option(names = {"--project-git-url"}, required = true, description = "Base url that will be replace inside gitconfig with be prefixed with user:token")
    String projectGitBaseUrl;

    @Option(names = {"--project-git-protocol"}, defaultValue = "https://", description = "Protocol used to access the remote git repository")
    String projectGitProtocol;

    @Option(names = {"--project-git-token"}, required = true, description = "")
    String token;

    @Option(names = {"--backup-config"}, description = "Backup the configuration files before modifications?", defaultValue = "false")
    boolean backupConfig;

    @Override
    public Integer call() throws Exception {
        updateConfig(userGitConfigPath, getIncludeIfConfig());
        updateConfig(projectGitConfigPath, getProjectConfig());
        return 0;
    }

    private void updateConfig(Path configPath, Config configToInclude) throws Exception {
        log.debug("Loading config from {}", configPath);
        CustomFileBasedConfig mainConfig = new CustomFileBasedConfig(configPath.toFile(), FS.DETECTED);
        mainConfig.load();
        //log.debug("Configuration to include in the {}:\n {}", mainConfig, configToInclude.toText());
        mainConfig.merge(configToInclude);
        if (backupConfig) {
            Utils.makeBackup(configPath);
        }
        mainConfig.save();
    }

    @Override
    public int getExitCode() {
        return 0;
    }

    public Config getIncludeIfConfig() {
        Config result = new Config();
        result.setString("includeIf", "gitdir:" + projectBasePath, "path", projectGitConfigPath.toString());
        return result;
    }

    public Config getProjectConfig() {
        Config result = new Config();
        result.setString("user", null, "name", userName);
        result.setString("user", null, "email", userEmail);
        String subsection = projectGitProtocol + userLogin + ":" + token + "@" + adddTrailingSlash(projectGitBaseUrl);
        result.setString("url", subsection, "insteadOf", projectGitProtocol + adddTrailingSlash(projectGitBaseUrl));
        return result;
    }
}
